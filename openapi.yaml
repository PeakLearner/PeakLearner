openapi: 3.0.0
info:
  title: PeakLearner
  version: 0.0.1
paths:
  '/uploadHubUrl/':
    put:
      summary: Upload a new hub.txt to the system
      description: >-
        Route for uploading a new UCSC formatted hub.txt with a genomes.txt and trackList.txt in the same directory
      parameters:
        - $ref: '#/components/parameters/url'

      responses:
        '200':
          description: Returns the label which was updated
          content:
            application/json:
              schema:
                type: string
                example: /Public/H3K4me3_TDH_ENCODE/
                description: The relative URL for the uploaded hub
        '404':
          description: Error parsing the hub info
          content: { }
  '/Jobs/':
    x-pyramid-route-name: jobs
    get:
      summary: Gets all the jobs
      description: >-
        Gets all the jobs currently on the server
      responses:
        200:
          description: A list containing all the jobs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Job'
            text/html:
              schema:
                type: string
                description: HTML Page with a list of the jobs
  '/Jobs/queue/':
    x-pyramid-route-name: jobQueue
    get:
      summary: Gets the next available task and queues it
      description: >-
        If there is a task in a job which is able to be queued, queue it and return the job
      responses:
        200:
          description: The job to be queued
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/taskOutput'
        404:
          description: There is no job to be queued
  '/features/':
    get:
      summary: Get all features
      description: >-
        Provides a list of all the features
      responses:
        '200':
          description: features retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                    type: string
            text/csv:
              schema:
                type: array
                items:
                  type: string
        '204':
          description: No features
          content: { }
        '404':
          description: An error occurred
          content: { }
  '/modelSums/':
    get:
      summary: Get all modelSums
      description: >-
        Provides a list of all the modelSums
      responses:
        '200':
          description: modelSums retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
            text/csv:
              schema:
                type: array
                items:
                  type: string
        '204':
          description: No modelSums
          content: { }
        '404':
          description: An error occurred
          content: { }
  '/losses/':
    get:
      summary: Get all losses
      description: >-
        Provides a list of all the losses
      responses:
        '200':
          description: losses retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
            text/csv:
              schema:
                type: array
                items:
                  type: string
        '204':
          description: No losses
          content: { }
        '404':
          description: An error occurred
          content: { }
  '/Jobs/{jobId}/':
    x-pyramid-route-name: jobsWithId
    get:
      summary: Gets the job with the ID
      description: >-
        Retrieves a job given the ID in the url
      parameters:
        - $ref: '#/components/parameters/jobId'
      responses:
        200:
          description: The job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
            text/html:
              schema:
                type: string
                description: HTML Page about the current job
        404:
          description: The job doesn't exist
    post:
      summary: Updates a task in a job
      description: >-
        Updates the task given the parameters
      parameters:
        - $ref: '#/components/parameters/jobId'
        - $ref: '#/components/parameters/task'
      responses:
        200:
          description: The job after the task was updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/taskOutput'
        404:
          description: The Job doesn't exist
  /Jobs/{jobId}/restart/:
    post:
      summary: Restarts the job
      description: >-
        Restarts the given job
      parameters:
        - $ref: '#/components/parameters/jobId'
      responses:
        200:
          description: The job after being restarted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        404:
          description: Job doesn't exist
  /Jobs/{jobId}/reset/:
    post:
      summary: Resets the job
      description: >-
        Resets the given job
      parameters:
        - $ref: '#/components/parameters/jobId'
      responses:
        200:
          description: The job after being reset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        404:
          description: Job doesn't exist
  '/{user}/{hub}/info/':
    get:
      summary: Get the hubInfo for this hub
      description: >-
        Gets the hubInfo for this hub. It contains the tracks, urls, the reference genome, and categories for that data
      responses:
        '200':
          description: The hub exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/hubInfo'
            text/html:
              schema:
                type: string
                description: The Webpage for this hubs info

        '404':
          description: The hub doesn't exist
      parameters:
        - $ref: '#/components/parameters/user'
        - $ref: '#/components/parameters/hub'
  '/{user}/{hub}/labels/':
    get:
      summary: Get the labels for a given hub/tracks
      description: >-
        Gets the labels for a given track, with parameters for limiting the
        query
      parameters:
        - $ref: '#/components/parameters/user'
        - $ref: '#/components/parameters/hub'
        - $ref: '#/components/parameters/tracks'
        - $ref: '#/components/parameters/ref'
        - $ref: '#/components/parameters/start'
        - $ref: '#/components/parameters/end'

      responses:
        '200':
          description: Returns a list of Labels in query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Label'
            text/csv:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Label'
              example: "chrom\tchromStart\tchromEnd\tannotation\tcreatedBy\tlastModifiedBy\tlastModified\nchr1\t85387205\t90463430\tpeakStart\tTristan.Miller@nau.edu\tTristan.Miller@nau.edu\t2018-12-19 09:26:03.478039"
        '204':
          description: No data for this query
          content: {}
        '404':
          description: Hub does not exist
          content: {}
    put:
      summary: Add label for a given hub/tracks
      description: >-
        Adds the label at the given position to the current args.
      parameters:
        - $ref: '#/components/parameters/user'
        - $ref: '#/components/parameters/hub'
        - $ref: '#/components/parameters/tracks'
        - $ref: '#/components/parameters/refRequired'
        - $ref: '#/components/parameters/startRequired'
        - $ref: '#/components/parameters/endRequired'
        
      responses:
        '200':
          description: Returns the label which was updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Label'
        '404':
          description: Hub/tracks does not exist
          content: {}
    post:
      summary: Update labels for a given hub/tracks
      description: >-
        Updates the label at the given position to the current args
      parameters:
        - $ref: '#/components/parameters/user'
        - $ref: '#/components/parameters/hub'
        - $ref: '#/components/parameters/tracks'
        - $ref: '#/components/parameters/refRequired'
        - $ref: '#/components/parameters/startRequired'
        - $ref: '#/components/parameters/endRequired'
        
      responses:
        '200':
          description: Returns the label which was updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Label'
        '404':
          description: Hub/tracks does not exist
          content: {}
    delete:
      summary: Delete a label at this location
      description: >-
        Removes the label at the given position to the current args
      parameters:
        - $ref: '#/components/parameters/user'
        - $ref: '#/components/parameters/hub'
        - $ref: '#/components/parameters/tracks'
        - $ref: '#/components/parameters/refRequired'
        - $ref: '#/components/parameters/startRequired'
        - $ref: '#/components/parameters/endRequired'
        
      responses:
        '200':
          description: Returns the label which was updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Label'
  '/{user}/{hub}/models/':
    get:
      summary: Get the models for a given hub/tracks
      description: >-
        Gets the models for a given track, with parameters for limiting the
        query
      parameters:
        - $ref: '#/components/parameters/user'
        - $ref: '#/components/parameters/hub'
        - $ref: '#/components/parameters/tracks'
        - $ref: '#/components/parameters/ref'
        - $ref: '#/components/parameters/start'
        - $ref: '#/components/parameters/end'
        - $ref: '#/components/parameters/modelType'

      responses:
        '200':
          description: Returns a list of Models in query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Model'
            text/csv:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Model'
              example: "chrom\tchromStart\tchromEnd\theight\tmodelType\n
              chr1\t85387205\t90463430\t17.2378\tFLOPART"
        '204':
          description: No data for this query
          content: { }
        '404':
          description: Hub does not exist
          content: { }
  /{user}/{hub}/permissions/:
    post:
      summary: Modifies the permissions for a user in the track
      description: >-
        Modifies the permissions for a user in the track
      parameters:
        - $ref: '#/components/parameters/user'
        - $ref: '#/components/parameters/hub'
        - $ref: '#/components/parameters/couser'
        - name: Label
          in: query
          schema:
            type: boolean
            description: Enable/Disable the ability to modify labels
        - name: Track
          in: query
          schema:
            type: boolean
            description: Enable/Disable the ability to modify tracks
        - name: Hub
          in: query
          schema:
            type: boolean
            description: Enable/Disable the ability to modify the hub
        - name: Moderator
          in: query
          schema:
            type: boolean
            description: Enable/Disable the ability to moderate the hub

      responses:
        '200':
          description: Refreshes the webpage
  /{user}/{hub}/addUser/:
    post:
      summary: Adds a user to the hub's permissions
      description: >-
        Adds a user to the hub's permissions with default permissions of only label modifications
      parameters:
        - $ref: '#/components/parameters/user'
        - $ref: '#/components/parameters/hub'
        - name: email
          in: query
          schema:
            type: string
            description: Email of the user to add
            example:
              Tristan.Miller@nau.edu

      responses:
        '200':
          description: Refreshes the webpage
  /{user}/{hub}/removeUser/:
    post:
      summary: Removes a user from the hub's permissions
      description: >-
        Removes a user from the hub's permissions
      parameters:
        - $ref: '#/components/parameters/user'
        - $ref: '#/components/parameters/hub'
        - name: email
          in: query
          schema:
            type: string
            description: Email of the user to remove
            example:
              Tristan.Miller@nau.edu

      responses:
        '200':
          description: Refreshes the webpage
  /{user}/{hub}/addTrack/:
    post:
      summary: Adds a track to a hub
      description: >-
        Adds a track to a hub with a track name and categories. This could be changed to a PUT
      parameters:
        - $ref: '#/components/parameters/user'
        - $ref: '#/components/parameters/hub'
        - name: track
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/track'
        - name: category
          in: query
          required: true
          schema:
            type: string
            description: Categories to go into, each sub category can be defined using a " / " between categories
            example:
              Data / Aorta
        - name: url
          in: query
          required: true
          schema:
            type: string
            description: URL to bigwig file of track served on an external server
            example:
              "https://rcdata.nau.edu/genomic-ml/PeakSegFPOP/labels/H3K4me3_TDH_ENCODE/samples/aorta/ENCFF115HTK/coverage.bigWig"

      responses:
        '200':
          description: Refreshes the webpage
  /{user}/{hub}/removeTrack/:
    post:
      summary: Removes a track from a hub
      description: >-
        Removes a track from a hub with a track name. This could be changed to a DELETE
      parameters:
        - $ref: '#/components/parameters/user'
        - $ref: '#/components/parameters/hub'
        - name: track
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/track'
      responses:
        '200':
          description: Refreshes the webpage
  /{user}/{hub}/delete/:
    delete:
      summary: Deletes the hub
      description: >-
        Deletes the hub, permissions required, only deletes hubInfo and nothing else (Should this even be changed?)
      parameters:
        - $ref: '#/components/parameters/user'
        - $ref: '#/components/parameters/hub'
        - name: track
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/track'
      responses:
        '200':
          description: Refreshes the webpage
  '/{user}/{hub}/unlabeled/':
    get:
      summary: Gets an unlabeled region for the hub
      description: >-
        Gets an unlabeled region for the hub, and returns what is needed to navigate to that
      parameters:
        - $ref: '#/components/parameters/user'
        - $ref: '#/components/parameters/hub'
      responses:
        '200':
          description: Returns the location to go to
          content:
            application/json:
              schema:
                type: string
                description: The place to go
  '/{user}/{hub}/labeled/':
    get:
      summary: Gets an labeled region for the hub
      description: >-
        Gets an labeled region for the hub, and returns what is needed to navigate to that
      parameters:
        - $ref: '#/components/parameters/user'
        - $ref: '#/components/parameters/hub'
      responses:
        '200':
          description: Returns the location to go to
          content:
            application/json:
              schema:
                type: string
                description: The place to go
  '/{user}/{hub}/data/{handler}':
    get:
      summary: Get data needed for jbrowse specific configuration files
      description: >-
        Jbrowse needs .json files for configuration so this parses hubInfo or returns the files needed for the refGene tracklist
      responses:
        '200':
          description: A file exists
          content:
            application/json:
              schema:
                type: object
                description: A configuration file JBrowse needs
        '404':
          description: A file doesn't exist
      parameters:
        - $ref: '#/components/parameters/user'
        - $ref: '#/components/parameters/hub'
        - in: path
          name: handler
          required: true
          schema:
            type: string
          description: "The filename or path trying to be aquired"
  '/{user}/{hub}/{track}/labels/':
    get:
      summary: Get the labels for a given track
      description: >-
        Gets the labels for a given track, with parameters for limiting the
        query
      parameters:
        - $ref: '#/components/parameters/user'
        - $ref: '#/components/parameters/hub'
        - $ref: '#/components/parameters/track'
        - $ref: '#/components/parameters/ref'
        - $ref: '#/components/parameters/start'
        - $ref: '#/components/parameters/end'

      responses:
        '200':
          description: Returns a list of Labels in query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Label'
            text/csv:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Label'
              example: "chrom\tchromStart\tchromEnd\tannotation\tcreatedBy\tlastModifiedBy\tlastModified\nchr1\t85387205\t90463430\tpeakStart\tTristan.Miller@nau.edu\tTristan.Miller@nau.edu\t2018-12-19 09:26:03.478039"
        '204':
          description: No data for this query
          content: {}
        '404':
          description: Track does not exist
          content: {}
    put:
      summary: Add label for a given track
      description: >-
        Adds the label at the given position to the current args
      parameters:
        - $ref: '#/components/parameters/user'
        - $ref: '#/components/parameters/hub'
        - $ref: '#/components/parameters/track'
        - $ref: '#/components/parameters/refRequired'
        - $ref: '#/components/parameters/startRequired'
        - $ref: '#/components/parameters/endRequired'
        
      responses:
        '200':
          description: Returns the label which was updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Label'
        '404':
          description: Track does not exist
          content: {}
    post:
      summary: Update labels for a given track
      description: >-
        Updates the label at the given position to the current args
      parameters:
        - $ref: '#/components/parameters/user'
        - $ref: '#/components/parameters/hub'
        - $ref: '#/components/parameters/track'
        - $ref: '#/components/parameters/refRequired'
        - $ref: '#/components/parameters/startRequired'
        - $ref: '#/components/parameters/endRequired'
        
      responses:
        '200':
          description: Returns the label which was updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Label'
        '404':
          description: Track does not exist
          content: {}
    delete:
      summary: Delete a label at this location
      description: >-
        Removes the label at the given position to the current args
      parameters:
        - $ref: '#/components/parameters/user'
        - $ref: '#/components/parameters/hub'
        - $ref: '#/components/parameters/track'
        - $ref: '#/components/parameters/refRequired'
        - $ref: '#/components/parameters/startRequired'
        - $ref: '#/components/parameters/endRequired'
        
      responses:
        '200':
          description: Returns the label which was updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Label'
  '/{user}/{hub}/{track}/models/':
    get:
      summary: Get the models for a given track
      description: >-
        Gets the Models for a given track, with parameters for limiting the
        query
      parameters:
        - $ref: '#/components/parameters/user'
        - $ref: '#/components/parameters/hub'
        - $ref: '#/components/parameters/track'
        - $ref: '#/components/parameters/ref'
        - $ref: '#/components/parameters/start'
        - $ref: '#/components/parameters/end'
        - $ref: '#/components/parameters/modelType'

      responses:
        '200':
          description: Returns a list of Models in query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Model'
            text/csv:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Model'
              example: "chrom\tchromStart\tchromEnd\theight\tmodelType\n
              chr1\t85387205\t90463430\t17.2378\tFLOPART"
        '204':
          description: No data for the track
          content: {}
        '404':
          description: Track does not exist
          content: {}
    put:
      summary: Put new PeakSegDiskModel
      description: >-
        Allows HPC clusters to upload the models which they create
      parameters: 
        - $ref: '#/components/parameters/user'
        - $ref: '#/components/parameters/hub'
        - $ref: '#/components/parameters/track'
        - $ref: '#/components/parameters/modelInfo'
        - $ref: '#/components/parameters/penalty'
        - $ref: '#/components/parameters/modelData'
      responses:
        '200':
          description: Uploading the model was a success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/modelInfo'
        '404':
          description: Track does not exist
          content: {}
  '/{user}/{hub}/{track}/features/':
    get:
      summary: Get features for current viewed track region
      description: >-
        Provides information on current features within a region
      parameters:
        - $ref: '#/components/parameters/user'
        - $ref: '#/components/parameters/hub'
        - $ref: '#/components/parameters/track'
        - $ref: '#/components/parameters/ref'
        - $ref: '#/components/parameters/start'

      responses:
        '200':
          description: features retrieved
          content:
            application/json:
              schema:
                type: string
        '204':
          description: No features
          content: { }
        '404':
          description: An error occurred
          content: { }
    put:
      summary: Put features
      description: >-
        Allows HPC clusters to upload the features which they generate
      parameters:
        - $ref: '#/components/parameters/user'
        - $ref: '#/components/parameters/hub'
        - $ref: '#/components/parameters/track'
        - $ref: '#/components/parameters/Problem'
        - $ref: '#/components/parameters/featureData'
      responses:
        '200':
          description: Uploading the features was a success
          content:
            application/json:
              schema:
                type: boolean
        '404':
          description: An error occurred while uploading
          content: { }
  '/{user}/{hub}/{track}/loss/':
    get:
      summary: Get loss for a model
      description: >-
        Provides information on loss given a model
      parameters:
        - $ref: '#/components/parameters/user'
        - $ref: '#/components/parameters/hub'
        - $ref: '#/components/parameters/track'
        - $ref: '#/components/parameters/ref'
        - $ref: '#/components/parameters/start'
        - $ref: '#/components/parameters/penalty'

      responses:
        '200':
          description: Loss retrieved
          content:
            application/json:
              schema:
                type: string
        '204':
          description: No loss
          content: { }
        '404':
          description: An error occurred
          content: { }
    put:
      summary: Put loss
      description: >-
        Allows HPC clusters to upload the loss for models which they generate
      parameters:
        - $ref: '#/components/parameters/user'
        - $ref: '#/components/parameters/hub'
        - $ref: '#/components/parameters/track'
        - $ref: '#/components/parameters/lossInfo'
        - $ref: '#/components/parameters/penalty'
        - $ref: '#/components/parameters/lossData'

      responses:
        '200':
          description: Uploading the loss was a success
          content:
            application/json:
              schema:
                type: boolean
        '404':
          description: An error occurred while uploading
          content: { }
  '/{user}/{hub}/{track}/jobs/':
    get:
      summary: Get jobs for current viewed track region
      description: >-
        Provides information on current jobs within a region
      parameters:
        - $ref: '#/components/parameters/user'
        - $ref: '#/components/parameters/hub'
        - $ref: '#/components/parameters/track'
        - $ref: '#/components/parameters/ref'
        - $ref: '#/components/parameters/start'
        - $ref: '#/components/parameters/end'

      responses:
        '200':
          description: Jobs retrieved
          content:
            application/json:
              schema:
                type: string
        '204':
          description: No Jobs
          content: { }
        '404':
          description: An error occurred
          content: { }
  '/{user}/{hub}/{track}/modelSum/':
    get:
      summary: Get the model summary for the selected contig
      description: >-
        Provides information on the queried contig
      parameters:
        - $ref: '#/components/parameters/user'
        - $ref: '#/components/parameters/hub'
        - $ref: '#/components/parameters/track'
        - $ref: '#/components/parameters/ref'
        - $ref: '#/components/parameters/start'

      responses:
        '200':
          description: Model sum retrieved
          content:
            application/json:
              schema:
                type: string
        '204':
          description: No model sum
          content: { }
        '404':
          description: An error occurred
          content: { }


components:
  schemas:
    # Lowercase = string name for that thing, Uppercase is some object representing that thing
    label:
      type: string
      enum: [peakStart, peakEnd, noPeak, unknown]
    Label:
      type: object
      properties:
        ref:
          $ref: '#/components/schemas/ref'
        start:
          $ref: '#/components/schemas/index'
        end:
          $ref: '#/components/schemas/index'
        label:
          $ref: '#/components/schemas/label'
        createdBy:
          $ref: '#/components/schemas/user'
        lastModifiedBy:
          $ref: '#/components/schemas/user'
        lastModified:
          $ref: '#/components/schemas/Time'
        track:
          $ref: '#/components/schemas/track'
    
    hubInfo:
      type: object
      properties:
        genome:
          type: string
          example: "hg19"
        isPublic:
          type: boolean
        owner:
          $ref: '#/components/schemas/user'
        tracks:
          type: object
          anyOf:
            - $ref: '#/components/schemas/Track'

    track:
      type: string
      example: "aorta_ENCFF115HTK"
    tracks:
      type: string
      example: "aorta_ENCFF115HTK,aorta_ENCFF502AXL,aorta_ENCFF974KVN"
    Track:
      type: object
      properties:
        categories: 
          type: string
          example: "data / aorta"
        key:
          $ref: '#/components/schemas/track'
        url:
          $ref: '#/components/schemas/url'
          

  
    url:
      type: string
      example: "https://rcdata.nau.edu/genomic-ml/PeakSegFPOP/labels/H3K4me3_TDH_ENCODE/samples/aorta/ENCFF115HTK/coverage.bigWig"
      description: Url to data for the track
    
    Model:
      type: object
      properties:
        ref:
          type: string
        start: 
          type: integer
        end:
          type: integer
        score:
          type: number
        type:
          type: string
    Time:
      type: object
      example: "2018-12-19 09:26:03.478039"
    ref:
      type: string
      example: "chr1"
    index:
      type: integer
      example: 85387205
    user:
      type: string
      format: email
      example: Public
    hub:
      type: string
      example: "H3K4me3_TDH_ENCODE"
    type:
      type: string
      enum: [json, csv, none]
    Problem:
      type: object
      properties:
        ref:
          $ref: '#/components/schemas/ref'
        start:
          $ref: '#/components/schemas/index'
        end:
          $ref: '#/components/schemas/index'
    jobStatus:
      type: string
      description: The current status of the job
      enum: [New, Queued, Processing, Done, Error]
    task:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/jobStatus'
        type:
          description: Current Task Type
          enum: [model, feature]
        taskId:
          type: integer
          minimum: 0
        penalty:
          type: number
          minimum: 0.0
      example:
        status: New
        type: feature
        taskId: 0
    Job:
      description: A job to be passed to clusters
      type: object
      properties:
        id:
          type: integer
          minimum: 0
        status:
          $ref: '#/components/schemas/jobStatus'
        user:
          $ref: '#/components/schemas/user'
        hub:
          $ref: '#/components/schemas/hub'
        track:
          $ref: '#/components/schemas/track'
        problem:
          $ref: '#/components/schemas/Problem'
        trackUrl:
          $ref: '#/components/schemas/url'
        priority:
          type: integer
          minimum: 0
        iteration:
          type: integer
          minimum: 0
        lastModified:
          $ref: '#/components/schemas/Time'
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/task'
    taskOutput:
      type: object
      description: What the output from task operations look like
      properties:
        status:
          $ref: '#/components/schemas/jobStatus'
        type:
          description: Current Task Type
          enum: [ model, feature ]
        taskId:
          type: integer
          minimum: 0
        penalty:
          type: number
          minimum: 0.0
          description: The penalty to use for generating the model
        user:
          $ref: '#/components/schemas/user'
        hub:
          $ref: '#/components/schemas/hub'
        track:
          $ref: '#/components/schemas/track'
        problem:
          $ref: '#/components/schemas/Problem'
        iteration:
          type: integer
          minimum: 0
        jobStatus:
          $ref: '#/components/schemas/jobStatus'
        id:
          type: integer
          minimum: 0
          description: The Job Id
        trackUrl:
          $ref: '#/components/schemas/url'
    modelInfo:
      type: object
      description: Additional information passed along
      properties:
        user:
          $ref: '#/components/schemas/user'
        hub:
          $ref: '#/components/schemas/hub'
        track:
          $ref: '#/components/schemas/track'
        problem:
          $ref: '#/components/schemas/Problem'
        jobId:
          type: integer
          minimum: 0



  parameters:
    user:
      name: user
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/user'
      description: "The user to query"
    couser:
      name: coUser
      in: query
      required: true
      schema:
        $ref: '#/components/schemas/user'
      description: The user to modify for permissions
    hub:
      name: hub
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/hub'
      description: "The hub to query"
    track:
      name: track
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/track'
      description: "The track to query"
    tracks:
      name: tracks
      in: query
      schema:
        $ref: '#/components/schemas/tracks'
      description: Which tracks to perform the operation on
    ref:  
      name: ref
      in: query
      schema:
        type: string
      description: "The reference chromosome to query"
    refRequired:  
      name: ref
      in: query
      required: true
      schema:
        type: string
      description: "The reference chromosome to query"
    start:  
      name: start
      in: query
      schema:
        type: number
      description: "The start pair to start querying from, both start and end are required if one exists"
    startRequired:  
      name: start
      in: query
      required: true
      schema:
        type: number
      description: "The start pair to start querying from"
    end:
      name: end
      in: query
      schema:
        type: number
      description: "The end pair to end querying atboth start and end are required if one exists"
    endRequired:
      name: end
      in: query
      required: true
      schema:
        type: number
      description: "The end pair to end querying at"
    modelType:
      name: modelType
      in: query
      schema:
        type: string
        enum: [LOPART, FLOPART, None]
      description: "What type of model to return"
    penalty:
      name: penalty
      in: query
      required: true
      schema:
        type: integer
        minimum: 0
    outputType:
      name: type
      in: query
      schema:
        $ref: '#/components/schemas/type'
    jsonOutputType:
      name: type
      in: query
      schema:
        type: string
        enum: [ json ]
    jobId:
      name: jobId
      in: path
      required: true
      schema:
        type: integer
        minimum: 0
    task:
      name: task
      in: query
      schema:
        $ref: '#/components/schemas/task'
    Problem:
      name: problem
      in: query
      required: true
      schema:
        $ref: '#/components/schemas/Problem'
    modelInfo:
      name: modelInfo
      in: query
      required: true
      schema:
        $ref: '#/components/schemas/modelInfo'
    modelData:
      name: modelData
      in: query
      required: true
      schema:
        type: string
        description: The output from pd.DataFrame.to_json() on the model
    featureData:
      name: data
      in: query
      required: true
      schema:
        type: string
        description: The output from pd.DataFrame.to_dict('records')
    lossInfo:
      name: lossInfo
      in: query
      required: true
      schema:
        $ref: '#/components/schemas/modelInfo'
    lossData:
      name: lossData
      in: query
      required: true
      schema:
        type: string
        description: The output from pd.DataFrame.to_json() on the loss
    url:
      name: url
      in: query
      required: true
      schema:
        type: string
        example: https://rcdata.nau.edu/genomic-ml/PeakSegFPOP/labels/H3K4me3_TDH_ENCODE/hub.txt
        description: The url to the hub.txt


servers:
  - url: 'http://localhost:8080'
    description: Development site
  - url: 'https://peaklearner.rc.nau.edu'
    description: The PeakLearner website

